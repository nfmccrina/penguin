// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Penguin.Services.Data;

#nullable disable

namespace Penguin.Services.Migrations
{
    [DbContext(typeof(PenguinDbContext))]
    partial class PenguinDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("Penguin.Services.Data.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int?>("ArtistId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CoverArtId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GenreId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int?>("PlayCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SongCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Starred")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("CoverArtId");

                    b.HasIndex("GenreId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Penguin.Services.Data.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CoverArtId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CoverArtId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Penguin.Services.Data.Models.CoverArt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CoverArt");
                });

            modelBuilder.Entity("Penguin.Services.Data.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Penguin.Services.Data.Models.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("Penguin.Services.Data.Models.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AlbumId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CoverArtId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GenreId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TrackNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CoverArtId");

                    b.HasIndex("GenreId");

                    b.HasIndex("LibraryId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("Penguin.Services.Data.Models.Album", b =>
                {
                    b.HasOne("Penguin.Services.Data.Models.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId");

                    b.HasOne("Penguin.Services.Data.Models.CoverArt", "CoverArt")
                        .WithMany()
                        .HasForeignKey("CoverArtId");

                    b.HasOne("Penguin.Services.Data.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId");

                    b.Navigation("Artist");

                    b.Navigation("CoverArt");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Penguin.Services.Data.Models.Artist", b =>
                {
                    b.HasOne("Penguin.Services.Data.Models.CoverArt", "CoverArt")
                        .WithMany()
                        .HasForeignKey("CoverArtId");

                    b.Navigation("CoverArt");
                });

            modelBuilder.Entity("Penguin.Services.Data.Models.Song", b =>
                {
                    b.HasOne("Penguin.Services.Data.Models.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId");

                    b.HasOne("Penguin.Services.Data.Models.CoverArt", "CoverArt")
                        .WithMany()
                        .HasForeignKey("CoverArtId");

                    b.HasOne("Penguin.Services.Data.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId");

                    b.HasOne("Penguin.Services.Data.Models.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId");

                    b.Navigation("Album");

                    b.Navigation("CoverArt");

                    b.Navigation("Genre");

                    b.Navigation("Library");
                });
#pragma warning restore 612, 618
        }
    }
}
